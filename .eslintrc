// This file was auto-generated, do not edit it directly.
// Instead run bin/update_build_scripts from
// https://github.com/das7pad/sharelatex-dev-env
{
  "root": true,
  "extends": [
    "eslint:recommended",
    "standard",
    "prettier"
  ],
  "plugins": [
    "chai-friendly"
  ],
  "env": {
    "browser": false,
    "mocha": false,
    "node": true,
    "es2020": true
  },
  "rules": {
    // Swap the no-unused-expressions rule with a more chai-friendly one
    "no-unused-expressions": "off",
    "chai-friendly/no-unused-expressions": "error",

    // Disable some rules after upgrading ESLint
    // TODO: re-enable and fix
    "no-var": "off",

    // do not allow importing of implicit dependencies.
    "import/no-extraneous-dependencies": "error",

    "node/no-callback-literal": "off",
    "node/no-deprecated-api": "off",
    "node/handle-callback-err": "off",
    "node/no-path-concat": "off"
  },
  "overrides": [
    // NOTE: changing paths may require updating them in the Makefile too.
    {
      "files": ["**/test/**/*.js"],
      "plugins": [
        "mocha",
        "chai-expect"
      ],
      "env": {
        "mocha": true
      }
    },
    {
      // Test specific rules
      "files": ["**/test/*/src/**/*.js", "**/test/**/*.test.js"],
      "globals": {
        "expect": true
      },
      "rules": {
        // mocha-specific rules
        "mocha/handle-done-callback": "error",
        "mocha/no-exclusive-tests": "error",
        "mocha/no-global-tests": "error",
        "mocha/no-identical-title": "error",
        "mocha/no-nested-tests": "error",
        "mocha/no-pending-tests": "error",
        "mocha/no-skipped-tests": "error",
        "mocha/no-mocha-arrows": "error",

        // chai-specific rules
        "chai-expect/missing-assertion": "error",
        "chai-expect/terminating-properties": "error",

        // prefer-arrow-callback applies to all callbacks, not just ones in mocha tests.
        // we don't enforce this at the top-level - just in tests to manage `this` scope
        // based on mocha's context mechanism
        "mocha/prefer-arrow-callback": "error"
      }
    },
    {
      // Frontend test specific rules
      "files": ["**/test/karma/**/*.js", "**/test/karma/import_tests.js"],
      "globals": {
        "expect": true,
        "$": true
      }
    },
    {
      // Backend specific rules
      "files": ["**/app/src/**/*.js", "app.js"],
      "env": {
        "node": true
      },
      "rules": {
        // don't allow console.log in backend code
        "no-console": "error",

        // do not allow importing of implicit dependencies.
        "import/no-extraneous-dependencies": ["error", {
          // do not allow importing of devDependencies.
          "devDependencies": false
        }]
      }
    },
    {
      // React rules
      "files": [
        "**/frontend/js/**/*.js",
        "**/frontend/stories/**/*.js",
        "**/test/frontend/**/*.js"
      ],
      "extends": [
        "plugin:react/recommended",
        "plugin:react-hooks/recommended",
        "plugin:jsx-a11y/recommended",
        "standard-jsx",
        "standard-react"
      ],
      "plugins": [
        "jsx-a11y"
      ],
      "env": {
        "browser": true
      },
      "rules": {
        "react/jsx-no-target-blank": "off",

        // Prevent usage of legacy string refs
        "react/no-string-refs": "error",

        // Prevent curly braces around strings (as they're unnecessary)
        "react/jsx-curly-brace-presence": ["error", {
          "props": "never",
          "children": "never"
        }],

        // Fix conflict between prettier & standard by overriding to prefer
        // double quotes
        "jsx-quotes": ["error", "prefer-double"],

        // Override weird behaviour of jsx-a11y label-has-for (says labels must be
        // nested *and* have for/id attributes)
        "jsx-a11y/label-has-for": [
          "error",
          {
            "required": {
              "some": [
                "nesting",
                "id"
              ]
            }
          }
        ]
      },
      "settings": {
        // Tell eslint-plugin-react to detect which version of React we are using
        "react": {
          "version": "detect"
        }
      },
      "parserOptions": {
        "sourceType": "module",
        "ecmaFeatures": {
          "jsx": true
        }
      }
    },
    {
      // Frontend specific rules
      "files": [
        "esbuild/inject/*.js",
        "**/frontend/js/**/*.js"
      ],
      "env": {
        "browser": true,
        "node": false
      },
      "globals": {
        "$": true,
        "angular": true,
        "ace": true,
        "ga": true,
        "sl_console": true,
        "sl_debugging": true
      }
    },
    {
      "files": ["scripts/ukamf/*.js"],
      "rules": {
        // Do not allow importing of any dependencies unless specified in either
        //  - web/package.json
        //  - web/scripts/ukamf/package.json
        "import/no-extraneous-dependencies": ["error", {"packageDir": [".", "scripts/ukamf"]}]
      }
    },
    {
      "files": [
        "scripts/*.js",
        "scripts/**/*.js"
      ],
      "env": {
        "node": true
      },
      "rules": {
        // Do not allow importing of any dependencies unless specified in either
        //  - web/package.json
        //  - web/scripts/package.json
        "import/no-extraneous-dependencies": ["error", {"packageDir": [".", "scripts/"]}]
      }
    }
  ]
}
