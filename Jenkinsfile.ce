// This file was auto-generated, do not edit it directly.
// Instead run bin/update_build_scripts from
// https://github.com/das7pad/sharelatex-dev-env

pipeline {
  agent {
    label 'sharelatex'
  }
  environment {
    DOCKER_COMPOSE_FLAGS = "-f docker-compose.ci.yml"
    IMAGE_CI = "ci/web:$BRANCH_NAME-$BUILD_NUMBER"
    IMAGE_NODE = 'node:10.17.0'
  }

  stages {
    stage('Prepare environment') {
      stages {
        stage('Pull node image') {
            when {
                expression {
                    env.DOCKER_REGISTRY != null
                }
            }
            steps {
                sh 'docker pull $DOCKER_REGISTRY/$IMAGE_NODE'
                sh 'docker tag $DOCKER_REGISTRY/$IMAGE_NODE $IMAGE_NODE'
            }
            post {
                cleanup {
                    sh 'docker rmi --force $DOCKER_REGISTRY/$IMAGE_NODE'
                }
            }
        }
        stage('Pull Cache') {
          when {
            expression {
              env.SHARELATEX_DOCKER_REPOS != null
            }
          }
          environment {
            IMAGE_BRANCH = "$SHARELATEX_DOCKER_REPOS/web:$BRANCH_NAME"
            IMAGE_BRANCH_DEV = "$SHARELATEX_DOCKER_REPOS/web:dev"
          }
          steps {
            sh '''
              docker pull $IMAGE_BRANCH \
              && docker tag $IMAGE_BRANCH $IMAGE_CI-cache \
              || (docker pull $IMAGE_BRANCH_DEV \
              && docker tag $IMAGE_BRANCH_DEV $IMAGE_CI-cache) \
              || echo 'no app layer build cache available'
            '''
          }
          post {
            cleanup {
              sh '''
                docker rmi --force \
                  $IMAGE_BRANCH \
                  $IMAGE_BRANCH_DEV \
              '''
            }
          }
        }
        stage('Cleanup and Create Output Directory For Test Results') {
          steps {
            sh 'mkdir --parents --mode=777 output'
            sh '''
              docker run --rm \
                --volume $PWD/output:/home/node \
                --user node \
                $IMAGE_NODE \
                sh -c 'find /home/node -mindepth 1 | xargs rm -rfv'
            '''
          }
        }
        stage('Clean Previous artifacts') {
          steps {
            sh 'git clean -xdf'
            sh 'mkdir --parents --mode=777 output'
          }
        }
      }
    }
    stage('CI') {
      options {
        timeout(time: 30, unit: 'MINUTES')
      }
      stages {
        stage('Build') {
          steps {
            sh 'make build'
          }
        }
        stage('Code Style') {
          parallel {
            stage('Lint') {
              steps {
                sh 'docker run --rm $IMAGE_CI make lint'
              }
            }

            stage('Prettier') {
              steps {
                sh 'docker run --rm $IMAGE_CI make format'
              }
            }
          }
        }

        stage('Unit Tests') {
          steps {
            sh 'make test_unit'
          }
          post {
            always {
              xunit (tools: [JUnit(pattern: 'output/unit.xml')])
            }
          }
        }

        stage('Acceptance Tests') {
          parallel {
            stage('Module Acceptance Tests') {
              steps {
                sh 'make test_acceptance_modules_run_ci'
              }
              post {
                always {
                  xunit (tools: [JUnit(pattern: 'output/module_*.xml')])
                }
              }
            }

            stage('Frontend Tests') {
              steps {
                sh 'make test_frontend_build_run'
              }
              post {
                always {
                  xunit (tools: [JUnit(pattern: 'output/frontend.xml')])
                }
              }
            }

            stage('App Acceptance Tests') {
              steps {
                sh 'make test_acceptance_app_run'
              }
              post {
                always {
                  xunit (tools: [JUnit(pattern: 'output/acceptance.xml')])
                }
              }
            }
          }
          post {
            cleanup {
              sh 'make clean_test_acceptance'
            }
          }
        }
      }
    }

    stage('Submit results') {
      options {
        timeout(time: 30, unit: 'MINUTES')
      }
      stages {
        stage('docker push') {
          when {
            expression {
              env.SHARELATEX_DOCKER_REPOS != null
            }
          }
          environment {
            IMAGE = "$SHARELATEX_DOCKER_REPOS/web:$BRANCH_NAME-$BUILD_NUMBER"
            IMAGE_BRANCH = "$SHARELATEX_DOCKER_REPOS/web:$BRANCH_NAME"
          }
          steps {
            sh 'docker tag $IMAGE_CI $IMAGE'
            sh 'docker push $IMAGE'
            sh 'docker tag $IMAGE $IMAGE_BRANCH'
            sh 'docker push $IMAGE_BRANCH'
          }
          post {
            cleanup {
              sh '''
                docker rmi --force \
                  $IMAGE \
                  $IMAGE_BRANCH \
              '''
            }
          }
        }
        stage('archive public') {
          steps {
            sh '''docker run \
              --rm \
              --volume $PWD/compress.sh:/compress.sh \
              --user root \
              --workdir /app/public \
              --entrypoint sh \
              $IMAGE_CI \
                -c '/compress.sh && tar --create .' \
              | xz -9e \
              > public.tar.xz
            '''
            archiveArtifacts artifacts: 'public.tar.xz', fingerprint: true
          }
          post {
            cleanup {
              sh 'rm -f public.tar.xz'
            }
          }
        }
      }
    }
  }

  post {
    cleanup {
      sh 'make clean_ci'
      sh 'docker rmi --force $IMAGE_NODE'
    }
  }
}
