extends ../../../../app/views/layout

block vars
	- metadata = { viewport: true }

block content
	.content.content-alt
		.login-register-container
			if ssoError
				.alert.alert-danger
					| Register Error: #{translate(ssoError )}

			.card.login-register-card(ng-cloak)
				.login-register-header
					h1.login-register-header-heading #{translate("register")}
				if sharedProjectData.user_first_name !== undefined
					.registration_message
						h3.registration-message-heading #{translate("user_wants_you_to_see_project", {username:sharedProjectData.user_first_name, projectname:""})}
							em #{sharedProjectData.project_name}
						div.registration-message-details
							| #{translate("join_sl_to_view_project")}.
						div.registration-message-details
							| #{translate("if_you_are_registered")},
							a(href="/login")  #{translate("login_here")}
				else if newTemplateData.templateName !== undefined
					.registration_message
						h3.registration-message-heading #{translate("register_to_edit_template", {templateName:newTemplateData.templateName})}
						div.registration-message-details #{translate("already_have_sl_account")}
							a(href="/login")  #{translate("login_here")}
				form.login-register-form(async-form="register", name="registerForm", action="/register", method="POST", captcha, captcha-action-name="register", ng-cloak)
					input(name='_csrf', type='hidden', value=csrfToken)
					form-messages(for="registerForm")
					.form-group
						label.sr-only(for='email') #{translate("email")}
						input.form-control(
							type='email'
							name='email'
							placeholder="Email"
							required
							ng-model="email"
							ng-init="email = "+JSON.stringify(new_email)
							ng-model-options="{ updateOn: 'blur' }"
							focus="true"
						)
						span.small.text-danger(ng-show="registerForm.email.$invalid && registerForm.email.$dirty")
							| #{translate("must_be_email_address")}
					.form-group
						label.sr-only(for='password') #{translate("password")}
						input.form-control#passwordField(
							type='password'
							name='password'
							placeholder="Password"
							required
							minlength=settings.passwordStrengthOptions.length.min
							maxlength=settings.passwordStrengthOptions.length.max
							ng-model="password"
							complex-password
						)
						span.small.text-danger(ng-show="registerForm.password.$error.complexPassword", ng-bind-html="complexPasswordErrorMessage")
					.actions
						button.btn-primary.btn.btn-block(
							type='submit'
							ng-disabled="registerForm.inflight || registerForm.password.$error.required|| registerForm.password.$error.complexPassword"
						)
							span(ng-show="!registerForm.inflight") #{translate("register_using_email")}
							span(ng-show="registerForm.inflight") #{translate("registering")}...
					.login-register-newsletter
						.checkbox
							input(
								type="checkbox"
								id="newslettercheckbox"
								name="subscribeToNewsletter"
								ng-model="subscribeToNewsletter"
								value="true"
							)
							label(for="newslettercheckbox") #{translate("newsletter-accept")}
					p.login-register-hr-text-container
						span.login-register-hr-text #{translate("login_register_or")}
					.form-group.text-center
						a.btn.btn-default.btn-block.login-btn-google(
							href="/auth/google?intent=sign_up"
						) 
							i.login-btn-icon.login-btn-icon-google
							| #{translate("register_using_service", {service:"Google"})}
					.form-group.text-center
						a.btn.btn-default.btn-block.login-btn-orcid(
							href="/auth/orcid?intent=sign_up"
						) 
							i.login-btn-icon.login-btn-icon-orcid
							| #{translate("register_using_service", {service:"ORCID"})}

	script(type='text/javascript').
		window.passwordStrengthOptions = !{JSON.stringify(settings.passwordStrengthOptions || {})}
