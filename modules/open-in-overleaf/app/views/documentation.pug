extends ../../../../app/views/_layout

block head-scripts
	link(rel='stylesheet' href=staticPath('/vendor/stylesheets/highlight-github.css'))
	script(type='text/javascript' src=staticPath('/js/libs/highlight.pack.js'))
	script(type='text/javascript').
		hljs.initHighlightingOnLoad();
	script(type='text/javascript').
		function openInOverleaf(a) {
			/*
			* Get the unformatted code from the formatted code box.
			*
			* Using the browser's selection isn't ideal, because it clobbers whatever
			* the user may have had in their clipboard.
			* It's almost possible to use innerText, but that does not work on FF.
			* FF supports textContent, but that discards the newlines, which are
			* represented by BR tags in the formatted code. So, we have to walk the DOM.
			*/
			var unformat = function (e) {
				var ret = "";
				if (e.nodeType === 1) { // element node
					if (e.tagName === "BR") {
						return "\n";
					} else {
						for (e = e.firstChild; e; e = e.nextSibling) {
								ret += unformat(e);
						}
						return ret;
					}
				} else if (e.nodeType === 3 || e.nodeType === 4) { // text node
						return e.nodeValue;
				}
			}
			var code = a.parentNode.parentNode.getElementsByTagName('CODE')[0];
			document.getElementById('ol_encoded_snip').value =
				encodeURIComponent(unformat(code));
			document.getElementById('ol_form').submit();
		}

block content
	.content.content-alt
		.container
			.row
				.col-md-12.col-lg-10.col-lg-offset-1
					.card
						.row
							.col-xs-12
								.page-header
									h1 Overleaf API
						.row
							.col-xs-12
								.small
									p Do you have your own LaTeX site? Would you like to add "Open in Overleaf" functionality to help it stand out? If so, you're at the right place!
									p Looking to quickly add a link from your blog? Easy options on our #[a(href='/partners') partners] page.

						.row
							.col-xs-12
								h2 One-click to open in Overleaf...
						.row
							.col-xs-12
								p We've developed the tools you need to load LaTeX code and files from your website or blog directly into Overleaf.

								p.
									See it in action: we recently worked with LaTeX-Community.org to allow all of their 66k examples to be loaded into Overleaf with one click
									(#[a(href='http://latex-community.org/forum/viewtopic.php?f=37&t=22340#') read more]).

								p To add similar functionality to your site, take a look at the sections below. If you have questions, please #[a(href='/contact') contact support] and we'll be happy to help.

						.row
							.col-xs-12
								h2 Overview
						.row
							.col-xs-12
								p You can load a code snippet into #[a(href='/') Overleaf] by passing it (or its URI) to #[strong https://www.overleaf.com/docs] using a form or a link.

								p The most basic approach is to use a link:

								pre
									code(class='html') https://www.overleaf.com/docs?snip_uri=#[strong http://pathtoyourfile.tex]

								p You may also link to a project instead of a single LaTeX snippet by passing the location of a zip file for the #[snip_uri] parameter

								p.
									Here are some links in action: #[br]
									#[a(href='/docs?snip_uri=http://www.texample.net/media/tikz/examples/TEX/rotated-triangle.tex') A LaTeX code snippet] -
									#[a(href='/docs?snip_uri=http://www.latextemplates.com/templates/presentations/3/presentation_3.zip') A zipped project]

								p.
									Some more advanced methods of embedding and opening LaTeX content are listed below in the #[strong implementations] section below.
									There are also a number of customisable features that can tailor the "Open in Overleaf" functionality to your needs. These can be
									found in the #[strong features] section below.

								p Please #[a(href='/contact') contact support] with any questions.

						.row
							.col-xs-12
								h2 Implementations
						.row
							.col-xs-12
								h3 Post a Snippet by URI (URL)

								p.
									You can post the URI of a file, and Overleaf will download the file and import it as the main file of the project.
									Here we pass the full path to this file for the #[code snip_uri] parameter. The file must be accessible from our servers.
									The file will be fetched using either HTTP or HTTPS, depending on the URI that you give it; other protocols are not yet supported.
									Files should be LaTeX files or zip format.

								p.
									Here we pass the full path to #[a(href='https://production-overleaf-static.s3.amazonaws.com/examples/helloworld.tex') this file]
									for the #[code snip_uri] parameter:

								form(method='POST' action='/docs' target='_blank')
									.form-group
										input.field.text.medium.span8.form-control(type='text' name='snip_uri' value='https://production-overleaf-static.s3.amazonaws.com/examples/helloworld.tex')
									.form-group.text-center
										input.btn-success.btn.btn-sm(type='submit' value='Open in Overleaf')

								p This form can be implemented with the following code:

								pre
									code(class='html')
										= '<form action="https://www.overleaf.com/docs" method="post" target="_blank">\n'
										= '<input type="text" name="snip_uri"\n'
										= '       value="https://production-overleaf-static.s3.amazonaws.com/examples/helloworld.tex"><br>\n'
										= '<input type="submit" value="Open in Overleaf">\n'
										= '</form>'

								p.
									Alternatively you can just #[a(href='/docs?snip_uri=https://production-overleaf-static.s3.amazonaws.com/examples/helloworld.tex') use a link]
									as described in the Overview section above. We recommend that you use #[code encodeURIComponent], or an equivalent method on the server side
									to escape each parameter, but this is not absolutely necessary.

								p You can also upload multiple files using #[code= 'snip_uri[]'] array parameters like this:
								pre
									code(class='html') https://www.overleaf.com/docs?#[strong= 'snip_uri[]=http://.../a.tex&snip_uri[]=http://.../b.tex']

								p And there's a #[code snip_name] parameter that you can use to override the name of each uploaded file, like this:
								pre
									code(class='html')
										| https://www.overleaf.com/docs?snip_uri[]=http://.../a.tex&
										|                               snip_uri[]=http://.../b.tex&
										|                               #[strong= 'snip_name[]=file1.tex&']
										|                               #[strong= 'snip_name[]=file2.tex']

						.row
							.col-xs-12
								h3 URL-encoded snippet

								p.
									URL encoding is useful if you submit using a hidden input field, as in this example. This avoids problems with newlines in the TeX source.
									This example posts the result of the PHP5 code:
								pre
									code(class='php') urlencode("\\documentclass{article}\n\\begin{document}\nHello \$i\$ \& \$j\$.\n\\end{document}\n");
								p.
									in the encoded_snip parameter. If using javascript, the #[code encodeURIComponent] function should be used (not the #[code escape] function, which has
									problems with internationalisation).

								form(method='POST' action='/docs' target='_blank')
									.form-group.text-center
										input(type='hidden' name='encoded_snip'
													value='%5Cdocumentclass%7Barticle%7D%0A%5Cbegin%7Bdocument%7D%0AHello+%24i%24+%5C%26+%24j%24.%0A%5Cend%7Bdocument%7D%0A')
										input.btn-success.btn.btn-sm(type='submit' value='Open in Overleaf')

						.row
							.col-xs-12
								h3 Raw snippet

								p.
									If you submit from the server side or with AJAX you can use the #[code snip] parameter, which assumes no encoding. Another use case
									is submission from a textarea (which could be hidden using CSS); in this case you must escape HTML entities in the HTML source.

								form(method='POST' action='/docs' target='_blank')
									.form-group
										textarea.field.textarea.medium.span8.form-control(rows='8' name='snip').
											\documentclass[12pt,letterpaper]{article}
											\usepackage[T1]{fontenc}
											\usepackage{amsmath}

											\begin{document}
											\noindent
											Bla bla bla bla :
											\begin{align*}
											A &amp;= B + C - D \\ \\
											%phantom
											&amp;\phantom{= B + C \;}
											%phantom
											+ D - E \\ \\
											&amp;= F + G - H.
											\end{align*}
											\end{document}
									.form-group.text-center
										input.btn-success.btn.btn-sm(type='submit' value='Open in Overleaf')

								p This form can be implemented with the following code:

								pre
									code(class='html')
										= '<form action="https://www.overleaf.com/docs" method="post" target="_blank">\n'
										= '<textarea rows="8" cols="60" name="snip">\n'
										= '\\usepackage[T1]{fontenc}\n'
										= '\\usepackage{amsmath}\n'
										= '\n'
										= '\\begin{document}\n'
										= '\\noindent\n'
										= 'Bla bla bla bla :\n'
										= '\\begin{align*}\n'
										= 'A &amp;= B + C - D \\\\ \\\\\n'
										= '%phantom\n'
										= '&amp;\\phantom{= B + C \\;}\n'
										= '%phantom\n'
										= '+ D - E \\\\ \\\\\n'
										= '&amp;= F + G - H.\n'
										= '\\end{align*}\n'
										= '\\end{document}\n'
										= '</textarea>\n'
										= '<input type="submit" value="Open in Overleaf">\n'
										= '</form>'

						.row
							.col-xs-12
								h3 Post from Formatted Code Box

								p This example shows how to extract the unformatted code from a CSS-styled code box and submit it to Overleaf. The key components are:
								ol
									li The Javascript that defines the #[code openInOverleaf()] function.
									li.
										The #[code form] with id #[code ol_form], which is used to POST the source as a URL-encoded snippet.
										Note that in this case you only need one form on the page, even if you have multiple codeboxes.
									li.
										The link in the code box that actually calls #[code openInOverleaf()].

								h4 Examples

								form.form-inline(id='ol_form' action='/docs' method='post' target='_blank')
									input(id='ol_encoded_snip' type='hidden' name='encoded_snip')

								dl(class='codebox')
									dt Code: #[a(href='#' onclick='openInOverleaf(this); return false;') Open in Overleaf]
									dd
										pre
											code(class='tex')
												| \renewcommand{\arraystretch}{2}
												| \[
												| g :=\left(
												| \begin{array}{c|c}
												| \mathbf{2^D} & \textbf{1} \\ \hline
												| \textbf{1} & \begin{array}{cc}
												| \boldsymbol{1^\alpha} & \textbf{0} \\
												| \textbf{0} & \boldsymbol{1^\beta}
												| \end{array} \\
												| \end{array}
												| \right)
												| \]

								dl(class='codebox')
									dt Code: #[a(href='#' onclick='openInOverleaf(this); return false;') Open in Overleaf]
									dd
										pre
											code(class='tex')
												| \documentclass{article}
												| \usepackage{tikz}
												| \usetikzlibrary{arrows}
												| \begin{document}
												| \begin{tikzpicture}[->,>=stealth',shorten >=1pt,auto,node distance=3cm,
												|   thick,main node/.style={circle,fill=blue!20,draw,font=\sffamily\Large\bfseries}]
												|
												|   \node[main node] (1) {1};
												|   \node[main node] (2) [below left of=1] {2};
												|   \node[main node] (3) [below right of=2] {3};
												|   \node[main node] (4) [below right of=1] {4};
												|
												|   \path[every node/.style={font=\sffamily\small}]
												|     (1) edge node [left] {0.6} (4)
												|         edge [bend right] node[left] {0.3} (2)
												|         edge [loop above] node {0.1} (1)
												|     (2) edge node [right] {0.4} (1)
												|         edge node {0.3} (4)
												|         edge [loop left] node {0.4} (2)
												|         edge [bend right] node[left] {0.1} (3)
												|     (3) edge node [right] {0.8} (2)
												|         edge [bend right] node[right] {0.2} (4)
												|     (4) edge node [left] {0.2} (3)
												|         edge [loop right] node {0.6} (4)
												|         edge [bend right] node[right] {0.2} (1);
												| \end{tikzpicture}
												| \end{document}

								h4 Implementation

								p The HTML required to add the examples above is:

								pre
									code(class='html')
										= '<form id="ol_form" action="https://www.overleaf.com/docs" method="post" target="_blank">\n'
										= '  <input id="ol_encoded_snip" type="hidden" name="encoded_snip">\n'
										= '</form>\n'
										= '<dl class="codebox">\n'
										= '  <dt>Code: <a href="#" onclick="openInOverleaf(this); return false;">Open in Overleaf</a></dt>\n'
										= '  <dd>\n'
										= '    <pre>\n'
										= '      <code class="tex">\n'
										= '        \\documentclass{article}\n'
										= '        ...\n'
										= '      </code>\n'
										= '    </pre>\n'
										= '  </dd>\n'
										= '</dl>'

								p The JavaScript code for the openInOverleaf method, which should be included in a #[code script] tag is:

								pre
									code(class='javascript')
										| function openInOverleaf(a) {
										|   /*
										|   * Get the unformatted code from the formatted code box.
										|   *
										|   * Using the browser's selection isn't ideal, because it clobbers whatever
										|   * the user may have had in their clipboard.
										|   * It's almost possible to use innerText, but that does not work on FF.
										|   * FF supports textContent, but that discards the newlines, which are
										|   * represented by BR tags in the formatted code. So, we have to walk the DOM.
										|   */
										|   var unformat = function (e) {
										|     var ret = "";
										|     if (e.nodeType === 1) { // element node
										|       if (e.tagName === "BR") {
										|         return "\n";
										|       } else {
										|         for (e = e.firstChild; e; e = e.nextSibling) {
										|             ret += unformat(e);
										|         }
										|         return ret;
										|       }
										|     } else if (e.nodeType === 3 || e.nodeType === 4) { // text node
										|         return e.nodeValue;
										|     }
										|   }
										|   var code = a.parentNode.parentNode.getElementsByTagName('CODE')[0];
										|   document.getElementById('ol_encoded_snip').value =
										|     encodeURIComponent(unformat(code));
										|   document.getElementById('ol_form').submit();
										| }

								p.
									The syntax highlighting in the code boxes is generated by #[a(href="https://highlightjs.org/") highlight.js],
									but you can add your own manually with #[code span] elements if you prefer.

						.row
							.col-xs-12
								h2 Features
								p The features below are included to aid usability of the "Open in Overleaf" implementations, and may be customized to suit your preferences.

						.row
							.col-xs-12
								h3 Decoration

								p.
									The code must be wrapped with a valid document in order to compile. If the code snippet does not have a #[code \documentclass] tag, it is
									wrapped in a standard document when it is imported:
								pre
									code(class='tex').
										\documentclass[12pt]{article}
										\usepackage[english]{babel}
										\usepackage[utf8x]{inputenc}
										\usepackage{amsmath}
										\usepackage{tikz}
										\begin{document}
										SNIPPET GOES HERE
										\end{document}

						.row
							.col-xs-12
								h3 Encoding

								p The submitted snippet should be encoded using UTF-8. Windows newlines are converted to unix newlines.

						.row
							.col-xs-12
								h3 TeX Engine

								p.
									By default, Overleaf tries to detect which TeX engine to use, and it usually chooses #[code pdflatex].
									If you would like to set the engine explicitly for your new project, you can pass an #[code engine] parameter
									with one of the following values: #[code latex_dvipdf], #[code pdflatex], #[code xelatex] or #[code lualatex].

						.row
							.col-xs-12
								h3 Rich Text

								p There are two editing modes in Overleaf: Source mode and Rich Text mode. By default, new project are displayed in #[strong Source mode].
								p You can mark a project to default to Rich Text mode by passing a #[code rich_text] parameter with value #[code true].
								p Note that the user can always switch between editing modes with one click, and their preference for each project is stored and has higher precedence over the default setting.

						.row
							.col-xs-12
								h3 Comment

								p We add a short 'welcome' comment at the top of the snippet:
								pre
									code(class='tex').
										%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
										%
										% Welcome to Overleaf --- just edit your LaTeX on the left,
										% and we'll compile it for you on the right. If you open the
										% 'Share' menu, you can invite other users to edit at the same
										% time. See www.overleaf.com/learn for more info. Enjoy!
										%
										%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
