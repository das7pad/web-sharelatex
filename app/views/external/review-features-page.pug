include ./_mixins
doctype html
html(itemscope, itemtype='http://schema.org/Product')
	head
		meta(charset="utf-8")
		- var metadata = { title: 'Track changes and commenting in LaTeX', viewport: true }
		include ../_metadata
		link(rel="icon", href="/ol-favicon.ico")
		if buildCssPath
			link(rel='stylesheet', href=buildCssPath(null, { hashedPath:true }), id="main-stylesheet")

	body
		main.rfp-main#main
			header.rfp-header
				.rfp-header-wrapper
					a.rfp-header-logo-container(href="/")
						img.rfp-header-logo(src=buildImgPath('ol-brand/overleaf-white.svg'), alt="Overleaf")
					a.btn.btn-primary(href="/project") Get Started

			section.rfp-section.rfp-section-masthead#intro
				.rfp-section-wrapper
					h1.rfp-h1.rfp-h1-masthead
						span.rfp-h1-masthead-portion.rfp-highlight Track changes&nbsp;
						span.rfp-h1-masthead-portion and&nbsp;
						span.rfp-h1-masthead-portion.rfp-highlight comments&nbsp;
						span.rfp-h1-masthead-portion in&nbsp;
						span.rfp-h1-masthead-portion.rfp-highlight LaTeX
					video.rfp-video.rfp-video-masthead(
						autoplay
						loop
						poster=buildImgPath("feature-page/intro-poster.jpg")
					)
						source(src=buildImgPath("feature-page/intro.mp4"), type="video/mp4")
					p.rfp-lead We remember the old days where you had to choose between using Track Changes in Word, or typesetting with LaTeX.
					p.rfp-lead.rfp-lead-strong Now you can do both.
			section.rfp-section.rfp-section-blockquote
				.rfp-section-wrapper
					blockquote.rfp-quote-main 
						p.rfp-quoted-text I can't tell you what a game-changer this new feature is for me and my collaborators. This feature puts ShareLaTeX (now #{settings.appName}) miles above the competition, as no one else has anything close to it.
						figure.rfp-quoted-person
							img.rfp-quoted-person-photo(src=buildImgPath("feature-page/pamela-marcum.jpg"))
							figcaption
								p.rfp-quoted-person-name Dr. Pamela Marcum
								p.rfp-quoted-person-affil Research Scientist
			section.rfp-section.rfp-section-feature 
				.rfp-section-wrapper
					.rfp-feature-description-container
						h2.rfp-h2 
							span.rfp-highlight Discuss 
							| Within #{settings.appName}
						p.rfp-p With real-time commenting, you can discuss your work without having to switch to email, printed versions or any other tool.
						p.rfp-p Leave comments, give quick feedback and resolve issues much more effectively with everything happening inside a single tool.
					.rfp-feature-video-container
						video.rfp-video.rfp-video-anim#video-1(
							loop
							poster=buildImgPath("feature-page/feat-discuss-poster.jpg")
						)
							source(src=buildImgPath("feature-page/feat-discuss.mp4"), type="video/mp4")
			section.rfp-section.rfp-section-feature.rfp-section-feature-alt
				.rfp-section-wrapper
					.rfp-feature-description-container
						h2.rfp-h2 
							| Track All 
							span.rfp-highlight Changes
						p.rfp-p Keep track of every change made to the document, along with the person making the change.
						p.rfp-p #{settings.appName} is the only LaTeX editor with real time tracked changes. Now there's nothing holding you back from being able to collaborate using LaTeX.
					.rfp-feature-video-container
						video.rfp-video.rfp-video-anim.rfp-video-anim-alt#video-2(
							loop
							poster=buildImgPath("feature-page/feat-changes-poster.jpg")
						)
							source(src=buildImgPath("feature-page/feat-changes.mp4"), type="video/mp4")
			section.rfp-section.rfp-section-feature
				.rfp-section-wrapper
					.rfp-feature-description-container
						h2.rfp-h2 
							| Keep One 
							span.rfp-highlight To-do 
							| List
						p.rfp-p Keep an up-to-date list of all of the things you need to work through, without having to sift through out-of-date notes or dig out old emails.
						p.rfp-p Comments alongside your work are a great way to keep a todo list, reminding you of everything that still needs to be done.
					.rfp-feature-video-container
						video.rfp-video.rfp-video-anim#video-3(
							loop
							poster=buildImgPath("feature-page/feat-todos-poster.jpg")
						)
							source(src=buildImgPath("feature-page/feat-todos.mp4"), type="video/mp4")
			section.rfp-section.rfp-section-feature.rfp-section-feature-alt
				.rfp-section-wrapper
					.rfp-feature-description-container
						h2.rfp-h2 
							span.rfp-highlight Accept 
							| and 
							span.rfp-highlight Reject 
							| Changes
						p.rfp-p Easily find what your co-authors or reviewers have changed and see how it impacts the document.
						p.rfp-p Accept or reject individual changes quickly with the click of a button, and move onto the next change needing your attention.
					.rfp-feature-video-container
						video.rfp-video.rfp-video-anim.rfp-video-anim-alt#video-4(
							loop
							poster=buildImgPath("feature-page/feat-accept-poster.jpg")
						)
							source(src=buildImgPath("feature-page/feat-accept.mp4"), type="video/mp4")
			section.rfp-section.rfp-section-feature-white
				.rfp-section-wrapper
					h3.rfp-h3 #{settings.appName} is used by over 2 million authors at institutions worldwide, including:
					.universities
						+universities()
			section.rfp-section.rfp-section-final
					.rfp-cta-container
						h3.rfp-h3.rfp-h3-cta Start using #{settings.appName} today to see these features in action.
						p.rfp-lead.rfp-lead-cta Join more than two million other people using #{settings.appName}.
						a.btn.btn-primary.btn-xl(href="/project") Start using #{settings.appName}
			include ../layout/footer
		script(type="text/javascript").
			(function(){
				// Underscore utils.
				var restArgs = function(func, startIndex) {
					startIndex = startIndex == null ? func.length - 1 : +startIndex;
					return function() {
						var length = Math.max(arguments.length - startIndex, 0),
								rest = Array(length),
								index = 0;
						for (; index < length; index++) {
							rest[index] = arguments[index + startIndex];
						}
						switch (startIndex) {
							case 0: return func.call(this, rest);
							case 1: return func.call(this, arguments[0], rest);
							case 2: return func.call(this, arguments[0], arguments[1], rest);
						}
						var args = Array(startIndex + 1);
						for (index = 0; index < startIndex; index++) {
							args[index] = arguments[index];
						}
						args[startIndex] = rest;
						return func.apply(this, args);
					};
				};
				var _ = {};
				_.now = Date.now || function() {
					return new Date().getTime();
				};
				_.delay = restArgs(function(func, wait, args) {
					return setTimeout(function() {
						return func.apply(null, args);
					}, wait);
				});
				var throttle = function(func, wait, options) {
					var timeout, context, args, result;
					var previous = 0;
					if (!options) options = {};

					var later = function() {
						previous = options.leading === false ? 0 : _.now();
						timeout = null;
						result = func.apply(context, args);
						if (!timeout) context = args = null;
					};

					var throttled = function() {
						var now = _.now();
						if (!previous && options.leading === false) previous = now;
						var remaining = wait - (now - previous);
						context = this;
						args = arguments;
						if (remaining <= 0 || remaining > wait) {
							if (timeout) {
								clearTimeout(timeout);
								timeout = null;
							}
							previous = now;
							result = func.apply(context, args);
							if (!timeout) context = args = null;
						} else if (!timeout && options.trailing !== false) {
							timeout = setTimeout(later, remaining);
						}
						return result;
					};

					throttled.cancel = function() {
						clearTimeout(timeout);
						previous = 0;
						timeout = context = args = null;
					};

					return throttled;
				};

				var debounce = function(func, wait, immediate) {
					var timeout, result;

					var later = function(context, args) {
						timeout = null;
						if (args) result = func.apply(context, args);
					};

					var debounced = restArgs(function(args) {
						if (timeout) clearTimeout(timeout);
						if (immediate) {
							var callNow = !timeout;
							timeout = setTimeout(later, wait);
							if (callNow) result = func.apply(this, args);
						} else {
							timeout = _.delay(later, wait, this, args);
						}

						return result;
					});

					debounced.cancel = function() {
						clearTimeout(timeout);
						timeout = null;
					};

					return debounced;
				};

				var initialized = false;
				var mainNode = null;
				var elements = [
					{ id: 'intro',   visibleClass: 'rfp-section-masthead-in', node: undefined, position: undefined, viewed: false },
					{ id: 'video-1', visibleClass: 'rfp-video-anim-in', node: undefined, position: undefined, viewed: false },
					{ id: 'video-2', visibleClass: 'rfp-video-anim-in', node: undefined, position: undefined, viewed: false },
					{ id: 'video-3', visibleClass: 'rfp-video-anim-in', node: undefined, position: undefined, viewed: false },
					{ id: 'video-4', visibleClass: 'rfp-video-anim-in', node: undefined, position: undefined, viewed: false },
				];

				function getCoords (node) { // crossbrowser version
					var box = node.getBoundingClientRect();

					var body = document.body;
					var docEl = document.documentElement;

					var scrollTop = window.pageYOffset || docEl.scrollTop || body.scrollTop;
					var scrollLeft = window.pageXOffset || docEl.scrollLeft || body.scrollLeft;

					var clientTop = docEl.clientTop || body.clientTop || 0;
					var clientLeft = docEl.clientLeft || body.clientLeft || 0;

					var top  = box.top +  scrollTop - clientTop;
					var left = box.left + scrollLeft - clientLeft;

					return { top: Math.round(top), left: Math.round(left) };
				}

				function refreshEls (shouldInitialize) {
					if (shouldInitialize) {
						initialized = true;
					}
					// do the coord refresh
					if (initialized) {
						if (!mainNode) {
							mainNode = document.getElementById('main');
						}

						for (var i = 0; i < elements.length; i++) {
							var curEl = elements[i];
							if (!curEl.node) {
								curEl.node = document.getElementById(curEl.id);
							}
							if (!curEl.viewed) {
								curEl.position = getCoords(curEl.node).top + (curEl.node.offsetHeight * 0.35);
							}
						}
						handleScroll();
					}
				}

				function handleScroll () {
					var windowPos = window.pageYOffset + window.innerHeight;

					for (var i = 0; i < elements.length; i++) {
						var curEl = elements[i];
						if (windowPos > curEl.position && !curEl.viewed) {
							curEl.viewed = true;
							curEl.node.classList.add(curEl.visibleClass);
							if (curEl.node.tagName.toLowerCase() === 'video') {
								curEl.node.play();
							}
						}
					}

					if (window.pageYOffset > 100) {
						mainNode.classList.add('rfp-main-header-collapsed');
					} else {
						mainNode.classList.remove('rfp-main-header-collapsed');
					}
				}

				// TODO debounce and throttle.
				window.addEventListener('resize', debounce(refreshEls, 50, true));
				window.addEventListener('orientationchange', debounce(refreshEls, 50, true));
				window.addEventListener('scroll', throttle(handleScroll, 100));

				document.addEventListener('DOMContentLoaded', function () {
					refreshEls(true);
				});
			}());

		- if (typeof(gaToken) != "undefined")
			script(type='text/javascript').
				(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
				(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
				m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
				})(window,document,'script','//www.google-analytics.com/analytics.js','ga');
				ga('create', '#{gaToken}', '#{settings.appName}.com');
				ga('send', 'pageview');
